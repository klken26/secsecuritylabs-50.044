## Place your answers here.
Exercise 1
We will need to find variables that invovles memory on the stack, either
through allocation of memory, use of buffers / pointers in functions.
zookd.c seems like a daemon handler, which will fork() whenever there is
a new client to handle their requests. Most of the variables are either 
declared as static or const; Hence they are either not in the stack nor not 
modifiable during runtime. 
However, zookd.c runs on functions from http.c, we can do code tracing
to find the functions that can change the stack when zookws is running.
In the process_client() function in zookd.c, there is a reqpath[4096]
variable with size 4096 bytes, that is parsed as a pointer to the 
http_request_line() function in http.c, which will process the http request
before returning to zookd for handling.
Hence, the process_client() function seems like a plausible point of 
exploitation.

Exercise 2
For this exercise, we will be testing our hypothesis by trying to overflow
the buffer when it writes to reqpath; Therefore the payload has to be larger
than 4096 bytes in order to overflow the buffer.
Format of GET request: GET (payload) HTTP/(version), which sets the syntax
for the request in exploit-2.py

We are only left with the size of payload required for the overflow to succeed.
Technically, we do not need to know the exact size as long as it is much larger
than 4096, hence we chose 5000.